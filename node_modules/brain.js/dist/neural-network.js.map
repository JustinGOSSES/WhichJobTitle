{"version":3,"sources":["../src/neural-network.js"],"names":["NeuralNetwork","iterations","errorThresh","log","logPeriod","learningRate","callback","callbackPeriod","reinforce","momentum","binaryThresh","hiddenLayers","activation","options","Object","assign","constructor","defaults","hiddenSizes","sizes","outputLayer","biases","weights","outputs","deltas","changes","errors","prototype","hasOwnProperty","runInput","calculateDeltas","length","layer","size","Array","node","prevSize","setActivation","runInputSigmoid","calculateDeltasSigmoid","runInputRelu","calculateDeltasRelu","runInputLeakyRelu","calculateDeltasLeakyRelu","runInputTanh","calculateDeltasTanh","Error","input","inputLookup","toArray","output","outputLookup","toHash","sum","k","Math","exp","tanh","data","_options","trainDefaults","formatData","console","inputSize","outputSize","push","max","floor","forEach","unshift","initialize","error","i","j","err","trainPattern","target","adjustWeights","incoming","delta","change","isArray","tmp","datum","Float32Array","buildLookup","map","value","array","isBinary","falsePos","falseNeg","truePos","trueNeg","misclasses","actual","expected","indexOf","misclass","stats","total","precision","recall","accuracy","layers","nodes","keys","bias","index","json","lookupFromHash","nodeHandle","layerNumber","nodeKey","result","w","join","toJSON","layersAsMath","key","Function","opts","neuralNetwork","trainStream"],"mappings":"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","file":"neural-network.js","sourcesContent":["import lookup from './lookup';\nimport TrainStream from './train-stream';\nimport max from './utilities/max';\nimport mse from './utilities/mse';\nimport randos from './utilities/randos';\nimport range from './utilities/range';\nimport toArray from './utilities/to-array';\nimport zeros from './utilities/zeros';\n\n/**\n *\n * @param {object} options\n * @constructor\n */\nexport default class NeuralNetwork {\n  static get trainDefaults() {\n    return {\n      iterations: 20000,\n      errorThresh: 0.005,\n      log: false,\n      logPeriod: 10,\n      learningRate: 0.3,\n      callback: null,\n      callbackPeriod: 10,\n      reinforce: false\n    };\n  }\n\n  static get defaults() {\n    return {\n      learningRate: 0.3,\n      momentum: 0.1,\n      binaryThresh: 0.5,\n      hiddenLayers: null,\n      activation: 'sigmoid'\n    };\n  }\n\n  constructor(options = {}) {\n    Object.assign(this, this.constructor.defaults, options);\n    this.hiddenSizes = options.hiddenLayers;\n\n    this.sizes = null;\n    this.outputLayer = null;\n    this.biases = null; // weights for bias nodes\n    this.weights = null;\n    this.outputs = null;\n\n    // state for training\n    this.deltas = null;\n    this.changes = null; // for momentum\n    this.errors = null;\n\n    if (!this.constructor.prototype.hasOwnProperty('runInput')) {\n      this.runInput = null;\n    }\n    if (!this.constructor.prototype.hasOwnProperty('calculateDeltas')) {\n      this.calculateDeltas = null;\n    }\n  }\n\n  /**\n   *\n   * @param {Number[]} sizes\n   */\n  initialize(sizes) {\n    this.sizes = sizes;\n    this.outputLayer = this.sizes.length - 1;\n    this.biases = []; // weights for bias nodes\n    this.weights = [];\n    this.outputs = [];\n\n    // state for training\n    this.deltas = [];\n    this.changes = []; // for momentum\n    this.errors = [];\n\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      let size = this.sizes[layer];\n      this.deltas[layer] = zeros(size);\n      this.errors[layer] = zeros(size);\n      this.outputs[layer] = zeros(size);\n\n      if (layer > 0) {\n        this.biases[layer] = randos(size);\n        this.weights[layer] = new Array(size);\n        this.changes[layer] = new Array(size);\n\n        for (let node = 0; node < size; node++) {\n          let prevSize = this.sizes[layer - 1];\n          this.weights[layer][node] = randos(prevSize);\n          this.changes[layer][node] = zeros(prevSize);\n        }\n      }\n    }\n\n    this.setActivation();\n  }\n\n  setActivation() {\n    switch (this.activation) {\n      case 'sigmoid':\n        this.runInput = this.runInput || this.runInputSigmoid;\n        this.calculateDeltas = this.calculateDeltas || this.calculateDeltasSigmoid;\n        break;\n      case 'relu':\n        this.runInput = this.runInput || this.runInputRelu;\n        this.calculateDeltas = this.calculateDeltas || this.calculateDeltasRelu;\n        break;\n      case 'leaky-relu':\n        this.runInput = this.runInput || this.runInputLeakyRelu;\n        this.calculateDeltas = this.calculateDeltas || this.calculateDeltasLeakyRelu;\n        break;\n      case 'tanh':\n        this.runInput = this.runInput || this.runInputTanh;\n        this.calculateDeltas = this.calculateDeltas || this.calculateDeltasTanh;\n        break;\n      default:\n        throw new Error('unknown activation ' + this.activation);\n    }\n  }\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  run(input) {\n    if (this.inputLookup) {\n      input = lookup.toArray(this.inputLookup, input);\n    }\n\n    let output = [...this.runInput(input)];\n\n    if (this.outputLookup) {\n      output = lookup.toHash(this.outputLookup, output);\n    }\n    return output;\n  }\n\n  /**\n   * trains via sigmoid\n   * @param input\n   * @returns {*}\n   */\n  runInputSigmoid(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //sigmoid\n        this.outputs[layer][node] = 1 / (1 + Math.exp(-sum));\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  runInputRelu(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //relu\n        this.outputs[layer][node] = (sum < 0 ? 0 : sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  runInputLeakyRelu(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //leaky relu\n        this.outputs[layer][node] = (sum < 0 ? 0 : 0.01 * sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  runInputTanh(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //tanh\n        this.outputs[layer][node] = Math.tanh(sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  /**\n   *\n   * @param data\n   * @param _options\n   * @returns {{error: number, iterations: number}}\n   */\n  train(data, _options = {}) {\n    const options = Object.assign({}, this.constructor.trainDefaults, _options);\n    data = this.formatData(data);\n    let iterations = options.iterations;\n    let errorThresh = options.errorThresh;\n    let log = options.log === true ? console.log : options.log;\n    let logPeriod = options.logPeriod;\n    let learningRate = _options.learningRate || this.learningRate || options.learningRate;\n    let callback = options.callback;\n    let callbackPeriod = options.callbackPeriod;\n    if (!options.reinforce) {\n      let sizes = [];\n      let inputSize = data[0].input.length;\n      let outputSize = data[0].output.length;\n      let hiddenSizes = this.hiddenSizes;\n      if (!hiddenSizes) {\n        sizes.push(Math.max(3, Math.floor(inputSize / 2)));\n      } else {\n        hiddenSizes.forEach(size => {\n          sizes.push(size);\n        });\n      }\n\n      sizes.unshift(inputSize);\n      sizes.push(outputSize);\n\n      this.initialize(sizes);\n    }\n\n    let error = 1;\n    let i;\n    for (i = 0; i < iterations && error > errorThresh; i++) {\n      let sum = 0;\n      for (let j = 0; j < data.length; j++) {\n        let err = this.trainPattern(data[j].input, data[j].output, learningRate);\n        sum += err;\n      }\n      error = sum / data.length;\n\n      if (log && (i % logPeriod === 0)) {\n        log('iterations:', i, 'training error:', error);\n      }\n      if (callback && (i % callbackPeriod === 0)) {\n        callback({ error: error, iterations: i });\n      }\n    }\n\n    return {\n      error: error,\n      iterations: i\n    };\n  }\n\n  /**\n   *\n   * @param input\n   * @param target\n   * @param learningRate\n   */\n  trainPattern(input, target, learningRate) {\n    learningRate = learningRate || this.learningRate;\n\n    // forward propagate\n    this.runInput(input);\n\n    // back propagate\n    this.calculateDeltas(target);\n    this.adjustWeights(learningRate);\n\n    let error = mse(this.errors[this.outputLayer]);\n    return error;\n  }\n\n  /**\n   *\n   * @param target\n   */\n  calculateDeltasSigmoid(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = error * output * (1 - output);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  calculateDeltasRelu(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = output > 0 ? error : 0;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  calculateDeltasLeakyRelu(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = output > 0 ? error : 0.01 * error;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  calculateDeltasTanh(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = (1 - output * output) * error;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param learningRate\n   */\n  adjustWeights(learningRate) {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      let incoming = this.outputs[layer - 1];\n\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let delta = this.deltas[layer][node];\n\n        for (let k = 0; k < incoming.length; k++) {\n          let change = this.changes[layer][node][k];\n\n          change = (learningRate * delta * incoming[k])\n            + (this.momentum * change);\n\n          this.changes[layer][node][k] = change;\n          this.weights[layer][node][k] += change;\n        }\n        this.biases[layer][node] += learningRate * delta;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {*}\n   */\n  formatData(data) {\n    if (!Array.isArray(data)) { // turn stream datum into array\n      let tmp = [];\n      tmp.push(data);\n      data = tmp;\n    }\n    // turn sparse hash input into arrays with 0s as filler\n    let datum = data[0].input;\n    if (!Array.isArray(datum) && !(datum instanceof Float32Array)) {\n      if (!this.inputLookup) {\n        this.inputLookup = lookup.buildLookup(data.map(value => value['input']));\n      }\n      data = data.map(datum => {\n        let array = lookup.toArray(this.inputLookup, datum.input);\n        return Object.assign({}, datum, { input: array });\n      }, this);\n    }\n\n    if (!Array.isArray(data[0].output)) {\n      if (!this.outputLookup) {\n        this.outputLookup = lookup.buildLookup(data.map(value => value['output']));\n      }\n      data = data.map(datum => {\n        let array = lookup.toArray(this.outputLookup, datum.output);\n        return Object.assign({}, datum, { output: array });\n      }, this);\n    }\n    return data;\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {\n   *  {\n   *    error: number,\n   *    misclasses: Array\n   *  }\n   * }\n   */\n  test(data) {\n    data = this.formatData(data);\n\n    // for binary classification problems with one output node\n    let isBinary = data[0].output.length === 1;\n    let falsePos = 0;\n    let falseNeg = 0;\n    let truePos = 0;\n    let trueNeg = 0;\n\n    // for classification problems\n    let misclasses = [];\n\n    // run each pattern through the trained network and collect\n    // error and misclassification statistics\n    let sum = 0;\n    for (let i = 0; i < data.length; i++) {\n      let output = this.runInput(data[i].input);\n      let target = data[i].output;\n\n      let actual, expected;\n      if (isBinary) {\n        actual = output[0] > this.binaryThresh ? 1 : 0;\n        expected = target[0];\n      }\n      else {\n        actual = output.indexOf(max(output));\n        expected = target.indexOf(max(target));\n      }\n\n      if (actual !== expected) {\n        let misclass = data[i];\n        Object.assign(misclass, {\n          actual: actual,\n          expected: expected\n        });\n        misclasses.push(misclass);\n      }\n\n      if (isBinary) {\n        if (actual === 0 && expected === 0) {\n          trueNeg++;\n        } else if (actual === 1 && expected === 1) {\n          truePos++;\n        } else if (actual === 0 && expected === 1) {\n          falseNeg++;\n        } else if (actual === 1 && expected === 0) {\n          falsePos++;\n        }\n      }\n\n      let errors = output.map((value, i) => {\n        return target[i] - value;\n      });\n      sum += mse(errors);\n    }\n    let error = sum / data.length;\n\n    let stats = {\n      error: error,\n      misclasses: misclasses\n    };\n\n    if (isBinary) {\n      Object.assign(stats, {\n        trueNeg: trueNeg,\n        truePos: truePos,\n        falseNeg: falseNeg,\n        falsePos: falsePos,\n        total: data.length,\n        precision: truePos / (truePos + falsePos),\n        recall: truePos / (truePos + falseNeg),\n        accuracy: (trueNeg + truePos) / data.length\n      });\n    }\n    return stats;\n  }\n\n  /**\n   *\n   * @returns\n   *  {\n   *    layers: [\n   *      {\n   *        x: {},\n   *        y: {}\n   *      },\n   *      {\n   *        '0': {\n   *          bias: -0.98771313,\n   *          weights: {\n   *            x: 0.8374838,\n   *            y: 1.245858\n   *          },\n   *        '1': {\n   *          bias: 3.48192004,\n   *          weights: {\n   *            x: 1.7825821,\n   *            y: -2.67899\n   *          }\n   *        }\n   *      },\n   *      {\n   *        f: {\n   *          bias: 0.27205739,\n   *          weights: {\n   *            '0': 1.3161821,\n   *            '1': 2.00436\n   *          }\n   *        }\n   *      }\n   *    ]\n   *  }\n   */\n  toJSON() {\n    let layers = [];\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      layers[layer] = {};\n\n      let nodes;\n      // turn any internal arrays back into hashes for readable json\n      if (layer === 0 && this.inputLookup) {\n        nodes = Object.keys(this.inputLookup);\n      }\n      else if (layer === this.outputLayer && this.outputLookup) {\n        nodes = Object.keys(this.outputLookup);\n      }\n      else {\n        nodes = range(0, this.sizes[layer]);\n      }\n\n      for (let j = 0; j < nodes.length; j++) {\n        let node = nodes[j];\n        layers[layer][node] = {};\n\n        if (layer > 0) {\n          layers[layer][node].bias = this.biases[layer][j];\n          layers[layer][node].weights = {};\n          for (let k in layers[layer - 1]) {\n            let index = k;\n            if (layer === 1 && this.inputLookup) {\n              index = this.inputLookup[k];\n            }\n            layers[layer][node].weights[k] = this.weights[layer][j][index];\n          }\n        }\n      }\n    }\n    return {\n      sizes: this.sizes,\n      layers,\n      outputLookup:!!this.outputLookup,\n      inputLookup:!!this.inputLookup,\n      activation: this.activation\n    };\n  }\n\n  /**\n   *\n   * @param json\n   * @returns {NeuralNetwork}\n   */\n  fromJSON(json) {\n    this.initialize(json.sizes);\n\n    for (let i = 0; i <= this.outputLayer; i++) {\n      let layer = json.layers[i];\n      if (i === 0 && (!layer[0] || json.inputLookup)) {\n        this.inputLookup = lookup.lookupFromHash(layer);\n      }\n      else if (i === this.outputLayer && (!layer[0] || json.outputLookup)) {\n        this.outputLookup = lookup.lookupFromHash(layer);\n      }\n      if (i > 0) {\n        const nodes = Object.keys(layer);\n        this.sizes[i] = nodes.length;\n        for (let j in nodes) {\n          const node = nodes[j];\n          this.biases[i][j] = layer[node].bias;\n          this.weights[i][j] = toArray(layer[node].weights);\n        }\n      }\n    }\n\n    this.setActivation();\n    return this;\n  }\n\n  /**\n   *\n   * @returns {Function}\n   */\n  toFunction() {\n    const activation = this.activation;\n    function nodeHandle(layers, layerNumber, nodeKey) {\n      if (layerNumber === 0) {\n        return (typeof nodeKey === 'string'\n          ? `input['${nodeKey}']`\n          : `input[${nodeKey}]`);\n      }\n\n      const layer = layers[layerNumber];\n      const node = layer[nodeKey];\n      let result = [node.bias];\n      for (let w in node.weights) {\n        if (node.weights[w] < 0) {\n          result.push(`${node.weights[w]}*(${nodeHandle(layers, layerNumber - 1, w)})`);\n        } else {\n          result.push(`+${node.weights[w]}*(${nodeHandle(layers, layerNumber - 1, w)})`);\n        }\n      }\n\n      switch (activation) {\n        case 'sigmoid':\n          return `1/(1+1/Math.exp(${result.join('')}))`;\n        case 'relu':\n          return `var sum = ${result.join('')};(sum < 0 ? 0 : sum);`;\n        case 'leaky-relu':\n          return `var sum = ${result.join('')};(sum < 0 ? 0 : 0.01 * sum);`;\n        case 'tanh':\n          return `Math.tanh(${result.join('')});`;\n        default:\n          throw new Error('unknown activation type ' + activation);\n      }\n    }\n\n    const layers = this.toJSON().layers;\n    const layersAsMath = [];\n    let result;\n    for (let i in layers[layers.length - 1]) {\n      layersAsMath.push(nodeHandle(layers, layers.length - 1, i));\n    }\n    if (this.outputLookup) {\n      result = `{${\n        Object.keys(this.outputLookup)\n          .map((key, i) => `'${key}':${layersAsMath[i]}`)\n      }}`;\n    } else {\n      result = `[${layersAsMath.join(',')}]`;\n    }\n    return new Function('input', `return ${result}`);\n  }\n\n  /**\n   * This will create a TrainStream (WriteStream) for us to send the training data to.\n   * @param opts training options\n   * @returns {TrainStream|*}\n   */\n  createTrainStream(opts) {\n    opts = opts || {};\n    opts.neuralNetwork = this;\n    this.setActivation();\n    this.trainStream = new TrainStream(opts);\n    return this.trainStream;\n  }\n}"]}