{"version":3,"sources":["../src/neural-network-gpu.js"],"names":["NeuralNetworkGPU","options","forwardPropagate","backwardPropagate","changesPropagate","biasesPropagate","gpu","mode","sizes","buildRunInput","buildCalculateDeltas","buildGetChanges","buildChangeBiases","buildGetMSE","input","target","learningRate","runInput","calculateDeltas","getChanges","changeBiases","getMSE","errors","outputLayer","weightedSum","activation","weightedSumSigmoid","weightedSumRelu","weightedSumLeakyRelu","weightedSumTanh","Error","layer","createKernel","output","outputToTexture","constants","size","outputs","weights","biases","calcDeltas","calcDeltasSigmoid","calcDeltasRelu","calcDeltasLeakyRelu","calcDeltasTanh","createKernelMap","error","alias","calcErrorOutput","deltas","targets","thread","x","calcError","nextWeights","nextDeltas","length","addWeights","changes","calcChanges","previousOutputs","momentum","change","addBiases","mse","inputLookup","toArray","outputLookup","toHash","data","Array","isArray","tmp","push","datum","Float32Array","buildLookup","map","value","array","Object","assign","inputs","sum","k","Math","exp","tanh","previousChanges","y","i","pow"],"mappings":"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","file":"neural-network-gpu.js","sourcesContent":["import NeuralNetwork from './neural-network';\nimport lookup from './lookup';\nimport GPU from 'gpu.js';\n\n/**\n *\n * @param {object} options\n * @constructor\n */\nexport default class NeuralNetworkGPU extends NeuralNetwork {\n  constructor(options = {}) {\n    super(options);\n\n    this.forwardPropagate = [];\n    this.backwardPropagate = [];\n    this.changesPropagate = [];\n    this.biasesPropagate = [];\n    this.gpu = new GPU({mode: options.mode});\n  }\n\n  /**\n   *\n   * @param {Number[]} sizes\n   */\n  initialize(sizes) {\n    super.initialize(sizes);\n    this.buildRunInput();\n    this.buildCalculateDeltas();\n    this.buildGetChanges();\n    this.buildChangeBiases();\n    this.buildGetMSE();\n  }\n\n  setActivation() {}\n\n  /**\n   *\n   * @param input\n   * @param target\n   * @param learningRate\n   */\n  trainPattern(input, target, learningRate) {\n    learningRate = learningRate || this.learningRate;\n    // forward propagate\n    this.runInput(input);\n\n    // backward propagate\n    this.calculateDeltas(target);\n    this.getChanges(learningRate);\n    this.changeBiases(learningRate);\n\n    return this.getMSE(this.errors[this.outputLayer])[0];\n  }\n\n  buildRunInput() {\n    let weightedSum = null;\n\n    switch (this.activation) {\n      case 'sigmoid':\n        weightedSum = weightedSumSigmoid;\n        break;\n      case 'relu':\n        weightedSum = weightedSumRelu;\n        break;\n      case 'leaky-relu':\n        weightedSum = weightedSumLeakyRelu;\n        break;\n      case 'tanh':\n        weightedSum = weightedSumTanh;\n        break;\n      default:\n        throw new Error('unknown activation ' + this.activation);\n    }\n\n    for(let layer = 1; layer <= this.outputLayer; layer++){\n      this.forwardPropagate[layer] = this.gpu.createKernel(weightedSum, {\n        output: [this.sizes[layer]],\n        outputToTexture: true,\n        constants: {\n          size: this.sizes[layer - 1]\n        }\n      });\n    }\n  }\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  runInput(input) {\n    let output;\n    this.outputs[0] = input;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.outputs[layer] = this.forwardPropagate[layer](\n        this.weights[layer], \n        this.biases[layer], \n        input\n      );\n\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  buildCalculateDeltas() {\n    let calcDeltas = null;\n\n    switch (this.activation) {\n      case 'sigmoid':\n        calcDeltas = calcDeltasSigmoid;\n        break;\n      case 'relu':\n        calcDeltas = calcDeltasRelu;\n        break;\n      case 'leaky-relu':\n        calcDeltas = calcDeltasLeakyRelu;\n        break;\n      case 'tanh':\n        calcDeltas = calcDeltasTanh;\n        break;\n      default:\n        throw new Error('unknown activation ' + this.activation);\n    }\n\n    for (let layer = this.outputLayer; layer > 0; layer--) {\n      if (layer === this.outputLayer){\n        this.backwardPropagate[layer] = this.gpu.createKernelMap({\n            error: GPU.alias('calcErrorOutput', calcErrorOutput),\n            deltas: GPU.alias('calcDeltas', calcDeltas)\n          }, function(outputs, targets) {\n            const output = outputs[this.thread.x];\n            return calcDeltas(calcErrorOutput(output, targets), output);\n          }, {\n            output: [this.sizes[layer]],\n            outputToTexture: true\n          });\n      } else {\n        this.backwardPropagate[layer] = this.gpu.createKernelMap({\n            error: GPU.alias('calcError', calcError),\n            deltas: GPU.alias('calcDeltas', calcDeltas),\n          }, function(nextWeights, outputs, nextDeltas){\n            let output = outputs[this.thread.x];\n            return calcDeltas(calcError(nextWeights, nextDeltas), output);\n          }, {\n            output: [this.sizes[layer]],\n            outputToTexture: true,\n            constants: {\n              size: this.deltas[layer + 1].length\n            }\n          });\n      }\n    }\n  }\n\n  calculateDeltas(target, learningRate) {\n    for (let layer = this.outputLayer; layer > 0; layer--) {\n      let output;\n      if (layer === this.outputLayer){\n        output = this.backwardPropagate[layer](\n          this.outputs[layer],\n          target);\n      } else {\n        output = this.backwardPropagate[layer](\n          this.weights[layer + 1],\n          this.outputs[layer],\n          this.deltas[layer + 1],\n        )}\n\n      this.deltas[layer] = output.deltas;\n      this.errors[layer] = output.error;\n    }\n  }\n\n  buildGetChanges() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.changesPropagate[layer] = this.gpu.createKernelMap({\n          weights: GPU.alias('addWeights', addWeights),\n          changes: GPU.alias('calcChanges', calcChanges)\n        },\n        function(previousOutputs, deltas, weights, changes, learningRate, momentum) {\n          let change = calcChanges(\n            changes,\n            deltas,\n            previousOutputs,\n            learningRate,\n            momentum);\n\n            return addWeights(change, weights);\n        }, {\n          output: [this.sizes[layer -1], this.sizes[layer]],\n          outputToTexture: true,\n          constants:{\n            size: this.outputs[layer - 1].length\n          }\n        });\n    }    \n  }\n  \n  getChanges(learningRate) {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      let output = this.changesPropagate[layer](\n        this.outputs[layer - 1],\n        this.deltas[layer],\n        this.weights[layer],\n        this.changes[layer],\n        learningRate,\n        this.momentum\n      );\n      \n      this.changes[layer] = output.changes;\n      this.weights[layer] = output.weights;\n    }\n  }\n\n  buildChangeBiases() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.biasesPropagate[layer] = this.gpu.createKernel(addBiases, {\n        output: [this.sizes[layer]],\n        outputToTexture: true\n      });\n    }\n  }\n\n  changeBiases(learningRate) {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.biases[layer] = this.biasesPropagate[layer](\n        this.biases[layer],\n        this.deltas[layer],\n        learningRate\n      );\n    }\n  }\n\n  buildGetMSE() {\n    this.getMSE = this.gpu.createKernel(mse, {\n      output: [1],\n      constants: {\n        size: this.outputLayer\n      }\n    });\n  }\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  run(input) {\n    if (this.inputLookup) {\n      input = lookup.toArray(this.inputLookup, input);\n    }\n    let output = [...this.runInput(input).toArray(this.gpu)];\n\n    if (this.outputLookup) {\n      output = lookup.toHash(this.outputLookup, output);\n    }\n    return output;\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {*}\n   */\n  formatData(data) {\n    if (!Array.isArray(data)) { // turn stream datum into array\n      let tmp = [];\n      tmp.push(data);\n      data = tmp;\n    }\n    // turn sparse hash input into arrays with 0s as filler\n    let datum = data[0].input;\n    if (!Array.isArray(datum) && !(datum instanceof Float32Array)) {\n      if (!this.inputLookup) {\n        this.inputLookup = lookup.buildLookup(data.map(value => value['input']));\n      }\n      data = data.map(datum => {\n        let array = lookup.toArray(this.inputLookup, datum.input);\n        return Object.assign({}, datum, { input: array });\n      }, this);\n    }\n\n    if (!Array.isArray(data[0].output)) {\n      if (!this.outputLookup) {\n        this.outputLookup = lookup.buildLookup(data.map(value => value['output']));\n      }\n      data = data.map(datum => {\n        let array = lookup.toArray(this.outputLookup, datum.output);\n        return Object.assign({}, datum, { output: array });\n      }, this);\n    }\n    return data;\n  }\n\n  toFunction() {\n    throw new Error('not implemented on NeuralNetworkGPU');\n  }\n}\n\nfunction weightedSumSigmoid(weights, biases, inputs) {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //sigmoid\n  return 1 / (1 + Math.exp(-sum));\n}\n\nfunction weightedSumRelu(weights, biases, inputs) {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //relu\n  return (sum < 0 ? 0 : sum);\n}\n\nfunction weightedSumLeakyRelu(weights, biases, inputs) {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //leaky relu\n  return (sum < 0 ? 0 : 0.01 * sum);\n}\n\nfunction weightedSumTanh(weights, biases, inputs) {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //tanh\n  return Math.tanh(sum);\n}\n\nfunction calcErrorOutput(output, targets) {\n  return targets[this.thread.x] - output;\n}\n\nfunction calcDeltasSigmoid(error, output) {\n  //sigmoid derivative\n  return error * output * (1 - output);\n}\n\nfunction calcDeltasRelu(error, output) {\n  //relu derivative\n  return output > 0 ? error : 0;\n}\n\nfunction calcDeltasLeakyRelu(error, output) {\n  //leaky relu derivative\n  return output > 0 ? error : 0.01 * error;\n}\n\nfunction calcDeltasTanh(error, output) {\n  //tanh derivative\n  return (1 - output * output) * error;\n}\n\nfunction calcError(nextWeights, nextDeltas){\n  let error = 0;\n  for(let k = 0; k < this.constants.size; k++){\n    error += nextDeltas[k] * nextWeights[k][this.thread.x];\n  }\n  return error;\n}\n\nfunction calcChanges(previousChanges, deltas, previousOutputs, learningRate, momentum) {\n  return (learningRate * deltas[this.thread.y] * previousOutputs[this.thread.x])\n      + (momentum * previousChanges[this.thread.y][this.thread.x]);\n}\n\nfunction addWeights(change, weights){\n  return change + weights[this.thread.y][this.thread.x];\n}\n\nfunction addBiases(biases, deltas, learningRate){\n  return biases[this.thread.x] + (deltas[this.thread.x] * learningRate);\n}\n\n// mean squared error, reimplemented for GPU\nfunction mse(errors) {\n  let sum = 0;\n  for (let i = 0; i < this.constants.size; i++) {\n    sum += Math.pow(errors[i], 2);\n  }\n  return sum / this.constants.size;\n}"]}